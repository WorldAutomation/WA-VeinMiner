
buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
	jcenter()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version '1.0.7'
    id 'org.ajoberstar.grgit' version '2.1.1'
}

apply plugin: 'forge'
apply plugin: 'maven'
apply plugin: "org.ajoberstar.grgit"
apply plugin: "com.matthewprenger.cursegradle"

ext.git = grgit.open(file('.'))

ext {
    configFile = file "build.properties"

    revision = git.head().abbreviatedId
    depth = git.log().size()
}


configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    //noinspection GrUnresolvedAccess
    ext.config = new ConfigSlurper().parse prop
}

group= "portablejim.veinminer"
version = config.mod_version
archivesBaseName = "VeinMiner"

minecraft {
    version = config.minecraft_version + "-" + config.forge_version
}

String buildNumber = "unknown"
if(System.getenv("BUILD_NUMBER") != null) {
    buildNumber = System.getenv("BUILD_NUMBER")
}

version = "${config.minecraft_version}-${config.mod_version}.${ext.depth}+${ext.revision}"

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        include 'version.properties'

        // replace version and mcversion
        expand 'version':project.config.mod_version, 'mcversion':project.config.minecraft_version, 'gitrev': revision,  'revnumber': depth
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
        exclude 'version.properties'
    }
}

ext.sharedmanifest = manifest {
        //attributes 'FMLCorePlugin': 'portablejim.veinminer.asm.VeinMinerCorePlugin'
        //attributes 'FMLCorePluginContainsFMLMod': 'true'
}

jar {
    manifest = project.manifest {
        from sharedmanifest
    }
}

sourceCompatibility = 6
targetCompatibility = 6

task apiJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'api'
    include "portablejim/veinminer/api/**"
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    manifest = project.manifest {
        from sharedmanifest
    }
    classifier = 'dev'
}

//noinspection GrUnresolvedAccess
task release(type: Copy) {
    dependsOn "build"

    from project.tasks.jar.archivePath
    into "release/"
}

build.dependsOn apiJar, deobfJar

artifacts {
    archives deobfJar
}

configurations {
    deployerJars
}

uploadArchives {
    dependsOn 'reobf'

    repositories {
        if(project.hasProperty("pushMaven")) {
            logger.info("Pushing to maven repo")

            mavenDeployer {
                configuration = configurations.deployerJars

                repository(url: "file://localhost/home/public_html/maven.jamesmckay.id.au/htdocs/")

                pom {
                    groupId = project.group
                    version = project.version
                    artifactId = project.archivesBaseName
                    packaging = 'jar'
                    description 'VeinMiner Mod'
                }
            }
        }
    }
}

curseforge {
    if (project.hasProperty('curseForgeApiKey')) apiKey = project.curseForgeApiKey
    else apiKey = 0
    //debug = true
    project {
        id = '67133'
        changelog = new File('Changelog.md').getText('utf-8').split('\n-{3,8}|\n\n')[2]
        changelogType = 'text'
        releaseType = 'alpha' // Just a default
        mainArtifact (jar) {
            displayName = "VeinMiner $config.mod_version [MC$config.compatible_versions; rev $depth]"
        }

        addArtifact apiJar
        addArtifact deobfJar

        for (String newVersion : config.compatible_versions.split(",")) {
            addGameVersion newVersion
        }
    }
}

task curseAlpha(dependsOn: tasks.curseforge) {}
task curseBeta(dependsOn: tasks.curseforge) {}
task curseRelease(dependsOn: tasks.curseforge) {}

gradle.taskGraph.whenReady { taskGraph ->
    curseforge.curseProjects.each { it.mainArtifact.displayName = "VeinMiner $config.mod_version [MC$config.compatible_versions; rev $ext.depth]" }
    if (taskGraph.hasTask(curseAlpha)) {
        curseforge.curseProjects.each { it.additionalArtifacts.each { it.releaseType = 'alpha' } }
        curseforge.curseProjects.each { it.releaseType = 'alpha' }
        curseforge.curseProjects.each { it.mainArtifact.releaseType = 'alpha' }
    } else if (taskGraph.hasTask(curseBeta)) {
        curseforge.curseProjects.each { it.releaseType = 'beta' }
        curseforge.curseProjects.each { it.mainArtifact.releaseType = 'beta' }
        curseforge.curseProjects.each { it.additionalArtifacts.each { it.releaseType = 'beta' } }
    } else if (taskGraph.hasTask(curseRelease)) {
        curseforge.curseProjects.each { it.releaseType = 'release' }
        curseforge.curseProjects.each { it.mainArtifact.releaseType = 'release' }
        curseforge.curseProjects.each { it.additionalArtifacts.each { it.releaseType = 'release' } }
    }
}


